/*
 * Contributor(s): Natasha Noy noy@smi.stanford.edu
 */
package edu.stanford.smi.protegex.prompt.ui;

import java.awt.BorderLayout;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.io.File;
import java.net.URI;
import java.util.Arrays;
import java.util.Collection;
import java.util.Iterator;

import javax.swing.AbstractAction;
import javax.swing.Action;
import javax.swing.Box;
import javax.swing.BoxLayout;
import javax.swing.JComboBox;
import javax.swing.JFileChooser;
import javax.swing.JPanel;
import javax.swing.JRadioButton;
import javax.swing.JTextField;

import edu.stanford.smi.protege.model.Project;
import edu.stanford.smi.protege.resource.Icons;
import edu.stanford.smi.protege.util.ComponentFactory;
import edu.stanford.smi.protege.util.ExtensionFilter;
import edu.stanford.smi.protege.util.FileUtilities;
import edu.stanford.smi.protege.util.LabeledComponent;
import edu.stanford.smi.protege.util.Log;
import edu.stanford.smi.protegex.prompt.ProjectsAndKnowledgeBases;
import edu.stanford.smi.protegex.prompt.PromptModes;
import edu.stanford.smi.protegex.prompt.PromptTab;

public class SingleFilePanel extends JPanel {
	private JTextField _fileNameTextField = null;
	private JComboBox _fileNameComboBox = null;
	private JTextField _fileAlias = null;
	private JRadioButton _preferred = null;
	private SingleFilePanel _panel;
	private boolean _includeAlias = true;
	private boolean _includePreferred = false;
	private int _mode;
	private int _number;
	
	private JPanel _mainPanel = new JPanel ();
	
	public SingleFilePanel (int mode, int number, boolean includeAlias) {
		super ();
		_includeAlias = includeAlias;
		_number = number;
		
		initialize (mode, "Choose the Mapping project (optional, must have been generated by this plugin)");
		
	}
	
	SingleFilePanel (int mode, int number) {
		super ();
		_number = number;
		
		//KB
		if(mode == PromptModes.MAPPING_MODE) {
			if (number == ProjectsAndKnowledgeBases.MAPPING_TARGET_INDEX)
				initialize (mode, "Choose the Target project (the current project is the Source)");
//			else
//			initialize (mode, "Choose the Mapping project (optional, must have been generated by Prompt)");        		
		} else {
			if (number == ProjectsAndKnowledgeBases.MERGING_SOURCE1_INDEX)
				initialize (mode, "Choose the first source project");
			else if (number == ProjectsAndKnowledgeBases.MERGING_SOURCE2_INDEX)
				initialize (mode, "Choose the second source project");
//			else
//				initialize (mode, "Choose the mapping project (optional, must have been generated by Prompt)");
		}
	}
	
	// this constructor is used only for diff
	SingleFilePanel (int mode, String promptString) {
		super ();
		initialize (mode, promptString);
	}
	
	
	SingleFilePanel () {
		super ();
		Log.getLogger().severe ("Shouldn't be here: SingleFilePanel()");
		//        initialize ("Choose the source");
	}
	
	private void initialize (int mode, String label) {
		if ((mode == PromptModes.DIFF_MODE) || (mode == PromptModes.MOVING_MODE))
			_includeAlias = false;
		
		if (mode == PromptModes.MERGING_MODE)
			_includePreferred = true;
		
		//KB
		if(mode == PromptModes.MAPPING_MODE)
			if(_number < 1)
				_includePreferred = true;
			else
				_includePreferred = false;
		
		setLayout (new BorderLayout());
		
		_mainPanel.setLayout(new BoxLayout (_mainPanel, BoxLayout.X_AXIS));
		_panel = this;
		_mode = mode;
		
		if (mode != PromptModes.MOVING_MODE)
			createFileChooser (label);
		else
			createComboBox (label);
		
		add (_mainPanel, BorderLayout.CENTER);
		if (_preferred != null && mode != PromptModes.MAPPING_MODE)
			add (_preferred, BorderLayout.EAST);
	}
	
	private void createFileChooser (String label) {
		_fileNameTextField =  ComponentFactory.createTextField ();
		LabeledComponent nameField = new LabeledComponent (label,  _fileNameTextField, false);
		
		if (_includeAlias)
			_fileAlias  = ComponentFactory.createTextField ();
		
		Action findAction = new AbstractAction ("FindFile", Icons.getAddIcon()) {
			Component _parent = _panel;
			public void actionPerformed(ActionEvent e) {
				//JFileChooser chooser =  DisplayUtilities.createFileChooser("Select file", ".pprj");
				java.util.List<String> extensions = Arrays.asList((new String[]{"pprj", "owl" , "rdfs", "rdf"}));
		 	    ExtensionFilter extensionFilter = new ExtensionFilter(extensions.iterator(), "Select file");		    	
				JFileChooser chooser = ComponentFactory.createFileChooser("Select file", extensionFilter);
				//KB
				if(PromptTab._projectDIR != null)
					chooser.setCurrentDirectory(new File(PromptTab._projectDIR));
				
				int returnVal = chooser.showOpenDialog (_panel);
				if (returnVal == JFileChooser.APPROVE_OPTION) {
					File chosen = chooser.getSelectedFile();
					URI chosenURI = chosen.toURI();
					PromptTab._projectDIR = chosenURI.getPath();
					
					_fileNameTextField.setText (chosenURI.toString());
					if (_fileAlias != null) _fileAlias.setText (createAlias(chosen));
					if (_preferred != null) _preferred.setEnabled(true);
				}
			}
		};
		
		nameField.addHeaderButton (findAction);
		
		
		if (_includeAlias) {
			LabeledComponent aliasField = new LabeledComponent ("Alias",  _fileAlias);
			nameField.setPreferredSize(new Dimension (350, (int)nameField.getPreferredSize().getHeight()));
			_mainPanel.add (nameField);
			
			_mainPanel.add (Box.createRigidArea(new Dimension (10, 0)));
			
			aliasField.setPreferredSize(new Dimension (100, (int)aliasField.getPreferredSize().getHeight()));
			_mainPanel.add (aliasField);
			if (_includePreferred) {
				_preferred = new JRadioButton ("preferred");
				_preferred.setSelected(false);
				_preferred.setEnabled(false);
			}
		} else {
			nameField.setPreferredSize(new Dimension (460,(int)nameField.getPreferredSize().getHeight()));
			_mainPanel.add (nameField);
		}
	}
	
	private void createComboBox (String label) {
		String [] includedProjectsNames;
		
		Project project = PromptTab.getTargetProject();
		if (!project.hasIncludedProjects()) {
			includedProjectsNames = new String[1];
			includedProjectsNames[0] = "The current project does not have any included projects. Cannot move frames.";
		} else {
			Collection includedProjects = project.getIncludedProjects();
			includedProjectsNames = new String[includedProjects.size()];
			Iterator i = includedProjects.iterator();
			for (int j = 0; j < includedProjects.size(); j++) {
				URI next = (URI)i.next();
				includedProjectsNames[j] = next.toString();
			}
//			includedProjectsNames = (String[])includedProjects.toArray(new String[0]);
		}
		
		_fileNameComboBox = new JComboBox (includedProjectsNames);
		_mainPanel.add (new LabeledComponent (label, _fileNameComboBox));
	}
	
	private String createAlias (File file) {
//		if (_fileAlias.getText().equals("")) {
		String alias = file.getName();
		return alias.substring (0, alias.indexOf ('.'));
//		} else
//		return _fileAlias.getText();
	}
	
	private String createAlias (String fileName) {
//		if (_fileAlias.getText().equals("")) {
		return FileUtilities.getBaseName (fileName);
//		} else
//		return _fileAlias.getText();
	}
	
	private String getAlias () {
		
		if ((!_includeAlias || _fileAlias.getText().equals("")) && getFileName() != null) {
			String alias = getFileName(getFileName());
			return alias.substring (0, alias.indexOf ('.'));
		} else if (_fileAlias == null)
			return null;
		else
			return _fileAlias.getText();
	}
	
	private String getFileName (String name) {
		if (name.length() == 0) {
			return "";
		}
		
		int begin = name.lastIndexOf(File.separatorChar);
		if (begin == -1) begin = 0;
		return name.substring(begin + 1);
	}
	
	public boolean isPreferred () {
		if (_preferred == null) return false;
		else return _preferred.isSelected();
	}
	
	public void setPreferred(boolean preferred)
	{
		if(_preferred != null)
			_preferred.setSelected(preferred);
	}
	
	public JRadioButton getPreferredButton () {
		return _preferred;
	}
	
	public String  getFileName () {
		if (_mode == PromptModes.MOVING_MODE) {
			String fileName = (String)_fileNameComboBox.getSelectedItem();
//			String path = PromptTab.getTargetProject().getProjectFilePath();
//			return FileUtilities.getCurrentWorkingDirectory() + java.io.File.separatorChar + fileName;
			return fileName;
		}
		else
			return _fileNameTextField.getText();
	}
	
//	public void  setFileName (String name) {
//	_fileName.setText(name);
//	_fileAlias.setText (createAlias(name));
//	}
	
	public String  getFileAlias () {
		return getAlias ();
	}
	
}